#+TITLE: Creating a .dotfiles folder 
#+DESCRIPTION: Create a .dotfiles folder to store all dotfile in one location 
#+AUTHOR: Mike Saltis
#+EXPORT_FILE_NAME: /home/belgarath/Documents/HTML/dotfiles_symlinks.html
#+SETUPFILE: /home/belgarath/OrgFiles/Configuration/org-html-themes/org/theme-readtheorg-local.setup
#+OPTIONS: num:nil

* How to create a Dotfiles Folder
-----
- Create the folder in the right location
- Move some configuration files into it
- Link them back to the original location
- Verify that it works!

* Create a folder to store your dotfiles
-----
Create this directory in the root of you home folder so that it's easier to use tools like GNU Stow:

#+begin_src
mkdir ~/.dotfiles
#+end_src

That is the new folder to to store dotfiles in.

* Move some of your existing configuration files and folders into it
-----
Move the configuration files you care about to an equivalent file path in ~/.dotfiles:

#+begin_src 
  mv ~/.emacs.d ~/.dotfiles/
  mv ~/.bash_profile ~/.dotfiles

  # ... etc ...
#+end_src

You should mirror the directory structure that the files have in your home folder on Linux and macOS so that dotfiles management tools can easily place the files where they belong.

On Windows this doesn’t matter quite as much.

* Create symbolic links to the original config file locations
-----
You can use the =ln= command on Linux and macOS to create symbolic links from a source file or directory to a new location:

#+begin_src
# Create a new link called ~/.emacs.d which comes from ~/.dotfiles/.emacs.d
ln -sf ~/.dotfiles/.emacs.d ~/.emacs.d
#+end_src

We’ll use this to create links back into the home directory for all the configuration files and folders we moved.

See below, "Symlink Tutorial" for more information on symbolic links.

* The downside of symbolic links
-----
As you might imagine, it’s tedious to create and manage symbolic links like this, especially when you are syncing them between machines.

Some people solve this by writing a “bootstrapping” script that can create all symbolic links automatically.

It’s easier to use a tool meant for this purpose, we will talk about GNU Stow and others!




* Symlink Tutorial

** Difference between a Soft Link and a Hard Link
Soft links are similar to shortcuts, and can point to another file or directory in any file system.

Hard links are also shortcuts for files and folders, but a hard link cannot be created for a folder or file in a different file system.

** How to Create a Symlink
The syntax for creating a symlink is:

#+begin_src shell
ln -s <path to the file/folder to be linked> <the path of the link to be created>
#+end_src

=ln= is the link command. The =-s= flag specifies that the link should be soft. =-s= can also be entered as =-symbolic=.

By default, =ln= command creates hard links. The next argument is _path to the file (or folder)_ that you want to link. (That is, the file or folder you want to create a shortcut for.)

And the last argument is the _path to link_ itself (the shortcut).

** How to Create a Symlink for a File – Example Command

#+begin_src shell
  ln -s /home/mike/transactions.txt trans.txt
#+end_src

After running this command, you will be able to access the =/home/mike/transactions.txt= with =trans.txt=. Any modification to =trans.txt= will also be reflected in the original file.

Note that this command above would create the link file =trans.txt= in your current directory. You can as well create a linked file in a folder link this:

#+begin_src shell
  ln -s /home/mike/transactions.txt my-stuffs/trans.txt
#+end_src

There must be a directory already called "my-stuffs" in your current directory – if not the command will throw an error.

** How to Create a Symlink for a Folder – Example Command
Similar to above, we'd use:

#+begin_src shell
  ln -s /home/mike mike
#+end_src

This would create a symlinked folder called '=mike=' which would contain the contents of =/home/mike=. Any changes to this linked folder will also affect the original folder.

** How to remove a symlink
Before you'd want to remove a symlink, you may want to confirm that a file or folder is a symlink, so that you do not tamper with your files.

One way to do this is:

#+begin_src shell
  ls -l <path-to-assumed-symlink>
#+end_src

Running this command on your terminal will display the properties of the file. In the result, if the first character is a small letter L (=l=), it means the file/folder is a symlink.

You'd also see an arrow (=->=) at the end indicating the file/folder the simlink is pointing to.

There are two methods to remove a symlink:

*** How to Use Unlink to Remove a Symlink
The syntax is:

#+begin_src shell
  unlink <path-to-symlink>
#+end_src

This deletes the symlink if the process is successful.

Even if the symlink is in the form of a folder, do not append =/=, because Linux will assume it's a directory and unlink can't delete directories.

*** How to use rm to Remove a Symlink
As we've seen, a symlink is just another file or folder pointing to an original file or folder. To remove that relationship, you can remove the linked file.

Hence, the syntax is:

#+begin_src shell
  rm <path-to-symlink>
#+end_src

For example:

#+begin_src shell
  rm trans.txt
  rm mike
#+end_src

Note that trying to do =rm mike/= would result an error, because Linux will assume =mike/= is a directory, which would require other options like =r= and =f=. But that's not what we want. A symlink may be a folder, but we are only concerned with the name.

The main benefit of =rm= over =unlink= is that you can remove multiple symlinks at once, like you can with files.

** How to Find and Delete Broken Links
Broken links occur when the file or folder that a symlink points to changes path or is deleted.

For example, if =transactions.txt= moves from =/home/mike= to =/home/mike/personal=, the =trans.txt= link becomes broken. Every attempt to access to the file will result in a =No such file or directory= error. This is because the link has no contents of its own.

When you discover broken links, you can easily delete the file. An easy way to find broken symlinks is:

#+begin_src shell
  find /home/mike -xtype l
#+end_src

This will list all broken symlinks in the =mike= directory – from files to directories to sub-directories.

Passing the =-delete= option will delete them like so:

#+begin_src shell
  find /home/mike -xtype l -delete
#+end_src

