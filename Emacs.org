#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.dotfiles/.emacs.d/init.el :mkdirp yes

* Emacs.org to init.el
This Org Mode document will generate the init.el which can be loaded by Emacs at startup.

The following varibles are used to tweak some configuration pieces for use on the Dell M3800. Might need to adjust them for Mac or any other machine.

NOTE: init.el is generated from this Emacs.org file. Edit this file in Emacs and init.el will be generated automatically.

#+begin_src emacs-lisp

  ;; May need to change the following for a different system
  (defvar mls/default-font-size 110)
  (defvar mls/default-variable-font-size 110)

  ;; Make frame transparency overridable
  (defvar mls/frame-transparency '(90 . 90)) 

#+end_src

* Startup Performance
=use-package= gives you a few different ways to defer package loading:

- =:hook= - Package will be loaded the first time one of the hooks is invoked
- =:bind= - Package will be loaded the first time one of the key bindings is used
- =:commands= - Package will be loaded when one of the commands are used
- =:mode= - Package will be loaded the first time a file with a particular extension is opened
- =:after= - Load this package after other specific packages are loaded
- =:defer= - If you don’t use any of the other options, this one will defer loading until after startup

There are a [[https://github.com/jwiegley/use-package#getting-started][few other options]] =use-package= provides, but these are all the most likely ones you would use.

The strategy is to look at all of your =use-package= expressions and decide whether it *really* needs to be loaded immediately at startup!

If you want to make sure a package gets loaded at startup despite the use of any of the options above, use =:demand t=.

*with-eval-after-load can be useful*
=with-eval-after-load= is a macro that causes a section of code to be executed only after a particular package gets loaded. If you need to split up your configuration into multiple sections, this is one way to ensure you don't accidentally cause a package to load too early!

** Tweaking the garbage collector. *See Runtime Performace for more GC Threshold*
Reduce the number of times the garbage collector will run during the startup process. Another option is to use this package: https://gitlab.com/koral/gcmh/

Set the =gc-cons-threshold= high at the beginning of the =init.el=:

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

#+end_src

*Note:* See end of file (Runtime Performance) to bring the =gc-cons-threshold= back down.

** Find out how long it takes emacs to load
This will help find out how long it's taking Emacs to start and print results.

#+begin_src emacs-lisp

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                     (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Package System Setup 
Emacs has a built in package manager but it doesn’t make it easy to automatically install packages on a new system the first time you pull down your configuration. [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

If package not found, may have to run =package-refreash-contents=

#+begin_src emacs-lisp

  ;; Initialize package sources

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  ;; Use this to track packages loaded during start-up. Remove if not tracking.
  ;; (setq use-package-verbose t)

#+end_src

** Automatically update packages
The auto-package-update package helps us keep our Emacs packages up to date! It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use M-x auto-package-update-now to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folder Clean
*Note:* Backup Files located in the .emacs.d/tmp/ directory.
** Move Backup Files
This moves any backup files created by emacs edits to the directory specified.

#+begin_src emacs-lisp

(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

#+end_src

Can also turn off auto backup of files entierly:

#+begin_src emacs-lisp

  ;;(setq make-backup-files nil)

#+end_src

More info: https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html

** Auto Save Files
auto-save-mode will create temporary files in the same folder as edited files: #Emacs.org#

You can change this using auto-save-file-name-transforms:

#+begin_src emacs-lisp

  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+end_src

More Info: https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save-Files.html#Auto-Save-Files

** No Littering
Use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean! It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself. Look at System Crafters YouTube video [[https://www.youtube.com/watch?v=XZjyJG-sFZI][Teach Emacs to Keep Your Folders Clean]].

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  ;; (setq auto-save-file-name-transforms
        ;; `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration 
** General Improvements
This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern. If you’re just getting started in Emacs, the menu bar might be helpful so you can remove the (menu-bar-mode -1) line if you’d like to still see that.

#+begin_src emacs-lisp 

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 5)         ; Give some breathing room
  (show-paren-mode t)         ; Show matching paren
  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)

#+end_src

** Font Configuration
I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine. Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp 

  (set-face-attribute 'default nil :font "Fira Code Retina" :height mls/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 120)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 130 :weight 'regular)

#+end_src

* Keybindings Configuration
** Evil Mode
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "tr" '(auto-revert-mode :which-key "buffer auto revert mode")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

** Custom Bindings
This is where I keep my own custom keybindings

* UI Configuration
** Command Log Mode
[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame. Great for live streams and screencasts!

#+begin_src emacs-lisp

  (use-package command-log-mode
  :commands command-log-mode)

#+end_src

** Color Theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes. Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best. You can also run =M-x= =counsel-load-theme= to choose between them easily.

[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-dracula.png][doom-dracula]]
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-one-light.png][doom-one-light]] - Light Theme
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-opera-light.png][doom-opera-light]] - Light Theme
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-molokai.png][doom-molokai]]
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-gruvbox.png][doom-gruvbox]]
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-moonlight.png][doom-moonlight]]
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-acario-dark.png][doom-acario-dark]]
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-outrun-electric.png][doom-outrun-electric]]
[[https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-tomorrow-day.png][doom-tomorrow-day]] - Light Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

  #+end_src

** Better Modeline
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs. The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you’ll need to run =M-x= =all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Avy Jumping
[[https://github.com/abo-abo/avy][avy]] is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also ace-jump-mode and vim-easymotion - =avy= uses the same idea.

_Keybindings_

- =C-;= Input one char, jump to it with the tree
- =C-:= Input two consectutive chars, jump to the first one with a tree
  The advantage over the input one char is less canidates for the tree search.

#+begin_src emacs-lisp

    (use-package avy
    :bind ("C-;" . avy)
    :bind ("C-:" . avy))

    (global-set-key (kbd "C-;") 'avy-goto-char)
    (global-set-key (kbd "C-:") 'avy-goto-char-2)

#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press =C-c= (hold control and press the letter c), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel Configuration
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace =find-file= with =counsel-find-file=, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    ;; (message "Ivy loaded")
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
  :config
  ;; (message "Counsel loaded")
  (counsel-mode 1))

#+end_src

** Improved Candidates Sorting with prescient.el
prescient.el provides some helpful behavior for sorting Ivy compleation candidates based on how recently or frequently you selet them. This can be helpful when using =M-x= to run commands that you don't have bound to a key but still need to access on ocasion.

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
  ;; Uncomment the following line to have sorting remembered accross session.
  ;; (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs’ describe- command buffers. For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling
This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen. We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale. You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
  :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Window Management
** winner-mode
=winner-mode= provides useful functions for undoing and redoing window configurations:

- =winner-undo= (=C-c left= or =C-w u=) bound below)
- =winner-redo= (=C-c right= or =C-w U=) bound below)

#+begin_src emacs-lisp

  (use-package winner-mode
    :ensure nil
    :bind (:map evil-window-map
                ("u" . winner-undo)
                ("U" . winner-redo))
    :config
    (winner-mode))

#+end_src

** ace-window
[[https://github.com/abo-abo/ace-window][ace-window]] makes it easy to jump between visible windows in your Emacs frame, just run the =ace-window= command and press the number displayed in the upper left corner of the window you want to switch to. It also enables you to swap, delete, and move windows using similar functionality.

#+begin_src emacs-lisp

  ;; (use-package ace-window)

#+end_src

** winum-mode
This mode shows numbers in your windows’ mode lines to tell you what keys you can press after using the key binding =C-x w=. Check out the [[https://github.com/deb0ch/emacs-winum][winum-mode]] page for more useful tips!

#+begin_src emacs-lisp

  (use-package winum
    :bind ("C-x w" . winum-mode)
    :config
    (winum-mode))

#+end_src

** tab-bar
#+begin_src emacs-lisp

;; (setq tab-bar-tab

#+end_src

* Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces
The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document in =org-mode=. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

    (with-eval-after-load 'org-faces
      ;; Increase the size of various headings
      (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)
      (dolist (face '((org-level-1 . 1.2)
		      (org-level-2 . 1.1)
		      (org-level-3 . 1.05)
		      (org-level-4 . 1.0)
		      (org-level-5 . 1.1)
		      (org-level-6 . 1.1)
		      (org-level-7 . 1.1)
		      (org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

#+end_src

** Basic Configuration 
This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates. There’s a lot to unpack in here so I’d recommend watching the videos for [[https://www.youtube.com/watch?v=VcgjTEa0kU4&feature=youtu.be][Part 5]] and [[https://www.youtube.com/watch?v=PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
  :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    ;; (message "org mode loaded")

    (setq org-ellipsis " ▾")
    (setq org-hide-emphasis-markers t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/OrgFiles/Tasks.org"
            "~/OrgFiles/RecurringDates.org"
            "~/OrgFiles/Medical.org"
            "~/OrgFiles/Planning.org"
            "~/OrgFiles/Recipies.org")))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save org buffers after refile
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; use C-c C-q for org-set-tags-command to set tags
    (setq org-tag-alist
          '((:startgroup)
                                          ; Put exclusive tags here
            (:endgroup)
            ("@home" . ?H)
            ("@outside" . ?O)
            ("@doctor" . ?D)
            ("@virtual" . ?V)
            ("note" . ?n)
            ("research" . ?r)
            ("medical" . ?m)
            ("vehicle" . ?v)))

  ;; Configure custom agenda views use M-x org-agenda then d
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 14)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("M" "Medical Tasks" tags-todo "+medical")
          ("W" "Work Tasks" tags-todo "+work")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-files org-agenda-files)))
            (todo "TRIP"
                  ((org-agenda-overriding-header "Driving in my Car")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))

  ;; use M-x org-capture to use the following tempates
  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/Projects/OrgFiles/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("m" "Medical")
          ("mm" "Medical" entry (file+olp "~/Projects/OrgFiles/Medical.org" "Important")
           "* TODO %?\n  %U\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/Projects/OrgFiles/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry (file+olp+datetree "~/Projects/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

  ;;	("m" "Metrics Capture")
  ;;	("mw" "Weight" table-line (file+headline "~/Projects/Code/OrgFiles/Metrics.org" "Weight")
  ;;	 "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (efs/org-font-setup)

#+end_src
** Nicer Headings and Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control. Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
** Center Org Buffers
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages
To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages for each language you’d like to use. [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all of the languages that you can use with org-babel.

#+begin_src emacs-lisp

    (with-eval-after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (shell . t)))

      (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates
Org Mode’s [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=. For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more src block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("conf" . "src conf-unix")))

#+end_src

** Auto-tangle Configuration Files
This snippet adds a hook to org-mode buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.

*What is going on here*
=add-hook= for =org-mode= so anytime and org mode buffer gets opened this hook is going to be fired.  Set an anonymous function that then calls =add-hook= again for this current buffer to say, after this buffer gets saved,  (=after-save-hook=) I  want to run this function =mls/org-babel-tangle-config= that is being defined. Doing this will tangle only the Emacs buffer and no other org mode buffer. 

#+begin_src emacs-lisp

  ;; Automatically tangle Emacs.org config file after saving 
  (defun mls/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/OrgFiles/Configuration/Emacs.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mls/org-babel-tangle-config)))

#+end_src

** Org-Roam

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/RoamNotes"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-setup)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

#+end_src

* Development
** Languages
** Web Development
*** web-mode.el
[[https://web-mode.org/][web-mode.el]] is an autonomous emacs major-mode for editing web templates. HTML documents can embed parts (CSS/JavaScript) and blocks (client/server side).

#+begin_src emacs-lisp

  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))

  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    )
  (add-hook 'web-mode-hook 'my-web-mode-hook)
  (setq tab-width 2)

  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-current-element-highlight t)

#+end_src

*** emmet-mode
[[https://github.com/smihica/emmet-mode][emmet-mode]]

#+begin_src emacs-lisp

  (use-package emmet-mode)
  (add-hook 'web-mode-hook  'emmet-mode) 
  (add-hook 'web-mode-before-auto-complete-hooks
            '(lambda ()
               (let ((web-mode-cur-language
                      (web-mode-language-at-pos)))
                 (if (string= web-mode-cur-language "php")
                     (yas-activate-extra-mode 'php-mode)
                   (yas-deactivate-extra-mode 'php-mode))
                 (if (string= web-mode-cur-language "css")
                     (setq emmet-use-css-transform t)
                   (setq emmet-use-css-transform nil)))))

#+end_src

*** js2-mode
js2-mode

#+begin_src emacs-lisp

(use-package js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

#+end_src

** IDE Featurs with lsp-mode
*** lsp-mode
Use the [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via “language servers” that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them. The =lsp-keymap-prefix= setting enables you to define a prefix for where lsp-mode’s default keybindings will be added. I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer. The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do. When pop-up window appears with more infromation type =M-x= =lsp-ui-doc-focus-fram=, to exit out of frame type M-x lsp-ui-unfocus-frame.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:
- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

  This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

(use-package lsp-treemacs
  :after lsp)

#+end_src

*** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with lsp-mode to make it easy to search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what you’re looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:
- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
  :after lsp)

#+end_src

** Debugging with dap-mode
[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]]. You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language. Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug

    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger")))

#+end_src

** TypeScript
This is a basic configuration for the TypeScript language so that .ts files activate typescript-mode when opened. We’re also adding a hook to typescript-mode-hook to call lsp-deferred so that we activate lsp-mode to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!* For lsp-mode to work with TypeScript (and JavaScript) you will need to install a language server on your machine. If you have Node.js installed, the easiest way to do that is by running the following command:

npm install -g typescript-language-server typescript

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

** Company Mode

    
#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  ;; (defun my-web-mode-hook ()
    ;; (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile
[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages. Many packages integrate with Projectile so it’s a good idea to have it installed even if you don’t use its commands directly.

#+begin_src emacs-lisp

  ;; Projectile Configuration ----------------------------------------------------

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit
[[https://magit.vc/][Magit]] is the best Git interface I’ve ever used. Common Git operations are easy to execute quickly using Magit’s command panel system.

#+begin_src emacs-lisp

    (use-package magit
      :commands magit-status
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

NOTE: Make sure to configure a GitHub token before using this package!
- https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
- https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

#+begin_src emacs-lisp

  (use-package forge
  :after magit)

#+end_src

** Commenting
Emacs’ built in commenting functionality comment-dwim (usually bound to M-;) doesn’t always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior. I’ve bound it to M-/ since other editors sometimes use this binding but you could also replace Emacs’ M-; binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Terminals
** term-mode
=C-c C-p= / =C-c C-n= - go back and forward in the buffer’s prompts (also [[ and ]] with evil-mode)
=C-c C-k= - Enter char-mode
=C-c C-j= - Return to line-mode
If you have evil-collection installed, term-mode will enter char mode when you use Evil’s Insert mode
Caveat - editing the input line with Evil motions doesn’t work
NOTE: term-mode doesn’t work on Windows: “Spawning child process: invalid argument”

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash")
    ;;(setq explicit-zsh-args '())
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

** For better color support
Make sure the tic program is available on your machine (could be part of ncurses package).

#+begin_src emacs-lisp

(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))

#+end_src

* File Management
** Dired
*** Key Bindings

*Navigation*

*Emacs / Evil*
- =n / j= - next line
- =p / k= - previous line
- =j / J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET / g O= - Open file in “other” window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (dired-view-file) - Open file but in a “preview” mode, close with q
-  =g / g r= Refresh the buffer with revert-buffer after changing configuration (and after filesystem changes!)
  
*Marking files*
- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t / t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= Lots of other auto-marking functions
- =k / K= - “Kill” marked items (refresh buffer with g / g r to get them back)
- Many operations can be done on a single file if there are no active marks!

*Copying and Renaming files*
- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: ^test , old-\&

*Power command:* =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them! Press =Z Z= to confirm renaming or =Z Q= to abort.

*Deleting files*
- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*Creating and extracting archives*
- =Z= - Compress or uncompress a file or folder to (.tar.gz)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*Other common operations*
- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "feh"))))

#+end_src

** Ranger

#+begin_src emacs-lisp
    ;; Use ranger

    (use-package ranger
      :bind (("C-x C-r" . ranger)))

#+end_src

* Applications
** Bash

#+begin_src conf-unix

#+end_src

** VIM
*** UI Configuration
**** Making things pretty
[[https://github.com/vim-airline/vim-airline][vim-airline]] is a lean mean status/tabline for vim that's as light as air.

#+begin_src conf-unix 

  "let g:airline_powerline_fonts = 1       " auto populate the airline_symbols dictionary with powerline symbols
  let g:airline_theme='violet'            " airline theme
  "let g:airline_theme='term'

#+end_src

* Runtime Performace
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))

#+end_src
